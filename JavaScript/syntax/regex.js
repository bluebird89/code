"00\d"; //可以匹配'007'，但无法匹配'00A'；
"\d\d\d"; //可以匹配'010'；
"\w\w"; // 可以匹配'js'；
"js." // 可以匹配'jsp'、'jss'、'js!'
`\d{3}` //表示匹配3个数字，例如'010'；
`\s` // 可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，'\t\t'等；
`\d{3,8}` // 表示3-8个数字，例如'1234567'。
`[0-9a-zA-Z\_]` // 可以匹配一个数字、字母或者下划线；
`[0-9a-zA-Z\_]+` // 可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'js2015'等等；
`[a-zA-Z\_\$][0-9a-zA-Z\_\$]*` // 可以匹配由字母或下划线、$开头，后接任意个由一个数字、字母或者下划线、$组成的字符串，也就是JavaScript允许的变量名；
`[a-zA-Z\_\$][0-9a-zA-Z\_\$]{0, 19}` // 更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。
`(J|j)ava(S|s)cript` // 可以匹配'JavaScript'、'Javascript'、'javaScript'或者'javascript'。
`^js$`; // 就变成了整行匹配，就只能匹配'js'了

var re = /^\d{3}\-\d{3,8}$/;
var re = new RegExp("/^d{3}-d{3,8}$/");

re.test("010-12345"); // 检索字符串中的指定值 true
re.test("010-1234x"); // false
re.test("010 12345"); // false

"a b   c".split(/\s+/); // ['a', 'b', 'c']
"a,b, c  d".split(/[\s\,]+/); // ['a', 'b', 'c', 'd'
"a,b;; c  d".split(/[\s\,\;]+/); // ['a', 'b', 'c', 'd']

var re = /^(\d{3})-(\d{3,8})$/; // 检索字符串中的指定值。返回值是被找到的值
re.exec("010-12345"); // ['010-12345', '010', '12345']
re.exec("010 12345"); // null

var re = /^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$/; // 首部的0是做什么用的
re.exec("19:05:30"); // ['19:05:30', '19', '05', '30']

var re = /^(\d+)(0*)$/;
re.exec("102300"); // ['102300', '102300', '']

var re = /^(\d+?)(0*)$/;
re.exec("102300"); // ['102300', '1023', '00']

var s = "JavaScript, VBScript, JScript and ECMAScript";
var re = /[a-zA-Z]+Script/g;

// 使用全局匹配:
re.exec(s); // ['JavaScript']
re.lastIndex; // 10
re.exec(s); // ['VBScript']
re.lastIndex; // 20
re.exec(s); // ['JScript']
re.lastIndex; // 29
re.exec(s); // ['ECMAScript']
re.lastIndex; // 44
re.exec(s); // null，直到结束仍没有匹配到
