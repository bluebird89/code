worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {
    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;
        location / {
            default_type text/html;

            content_by_lua_block {
                ngx.say("HelloWorld")
            }
        }

        location /test {
            content_by_lua_block {
                local regex = [[\d+]]

                -- 参数 "j" 启用 JIT 编译，参数 "o" 是开启缓存必须的
                local m = ngx.re.match("hello, 1234", regex, "jo")
                if m then
                    ngx.say(m[0])
                else
                    ngx.say("not matched!")
                end
            }
        }

        location = /sum {
            # 只允许内部调用
            internal;

            # 这里做了一个求和运算只是一个例子，可以在这里完成一些数据库、
            # 缓存服务器的操作，达到基础模块和业务逻辑分离目的
            content_by_lua_block {
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) + tonumber(args.b))
            }
        }
        location = /subduction {
            internal;
            content_by_lua_block {
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) - tonumber(args.b))
            }
        }
        location = /app/test {
            content_by_lua_block {
                local res = ngx.location.capture(
                                "/sum", {args={a=3, b=8}}
                                )
                ngx.say("status:", res.status, " response:", res.body)
            }
        }

        location = /app/test_parallels {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1, res2 = ngx.location.capture_multi( {
                                {"/sum", {args={a=3, b=8}}},
                                {"/subduction", {args={a=3, b=8}}}
                            })
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }

        location = /app/test_queue {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1 = ngx.location.capture_multi( {
                                {"/sum", {args={a=3, b=8}}}
                            })
                local res2 = ngx.location.capture_multi( {
                                {"/subduction", {args={a=3, b=8}}}
                            })
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }

    }
}